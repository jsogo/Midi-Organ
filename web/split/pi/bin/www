#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('web:server');
var http = require('http');
var settings = require('../settings');
const player = require('../controllers/player');
/**
 * Get port from environment and store in Express.
 */

if (!(settings.port)) {
  throw new Error("No port defined in settings.js");
}


var port = normalizePort(process.env.PORT || settings.port);
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);


var io = require('socket.io')(server);

io.on('connection', function (socket) {

  //check when people connect and disconnect to the server
  console.log("A client has connected.");
  socket.on('disconnect', function () {
    console.log("A client has disconnected.")
  });

  //various client commands
  socket.on('add song', function (songName) {
    //add song to the song queue
    if (settings.songs[songName]) {
      player.add(songName);
      //ask everyone to update.
      var Queue = player.getQueue();
      var Current = player.getCurrent();
      io.emit('update', { queue: Queue, current: Current, time: player.time() });
    }
  });
  socket.on('remove song', function (songIndex) {
    if (songIndex >= 0 && songIndex < player.queueLength()) {
      player.remove(songIndex);
      //ask everyone to update.
      var Queue = player.getQueue();
      var Current = player.getCurrent();
      io.emit('update', { queue: Queue, current: Current, time: player.time() });

    }
  });
  socket.on('skip', function () {
    player.skip();//ask everyone to update.
    var Queue = player.getQueue();
    var Current = player.getCurrent();
    io.emit('update', { queue: Queue, current: Current, time: player.time() });
  });
  socket.on('restart', function () {
    player.restart();//ask everyone to update.
    var Queue = player.getQueue();
    var Current = player.getCurrent();
    io.emit('update', { queue: Queue, current: Current, time: player.time() });
  });
  //page initially asks for updates
  socket.on('get updates', function () {
    var Queue = player.getQueue();
    var Current = player.getCurrent();
    io.emit('update', { queue: Queue, current: Current, time: player.time() });
  });

  player.on('change', function() {
    var Queue = player.getQueue();
    var Current = player.getCurrent();
    io.emit('update', { queue: Queue, current: Current, time: player.time() });
  })
});

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);



/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
